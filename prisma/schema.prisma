generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Tenant {
  id        String   @id @default(cuid())
  name      String
  plan      String   @default("free")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  memberships Membership[]
  contacts    Contact[]
  deals       Deal[]
  notes       Note[]
  projects    Project[]

  @@map("tenant")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  memberships Membership[]
  ownedContacts Contact[] @relation("ContactOwner")
  ownedDeals    Deal[]    @relation("DealOwner")
  notes         Note[]
  accounts      Account[]
  sessions      Session[]

  @@map("app_user")
}

model Membership {
  userId   String
  tenantId String
  role     String // owner, admin, member

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@id([userId, tenantId])
  @@map("membership")
}

model Contact {
  id       String  @id @default(cuid())
  tenantId String
  name     String
  email    String?
  phone    String?
  company  String?
  ownerUserId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  owner  User?  @relation("ContactOwner", fields: [ownerUserId], references: [id])
  deals  Deal[]
  notes  Note[]

  @@map("contact")
}

model Deal {
  id          String   @id @default(cuid())
  tenantId    String
  title       String
  value       Float?
  stage       String   @default("lead") // lead, qualified, proposal, won, lost
  contactId   String?
  ownerUserId String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  tenant  Tenant  @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  contact Contact? @relation(fields: [contactId], references: [id])
  owner   User?   @relation("DealOwner", fields: [ownerUserId], references: [id])
  notes   Note[]

  @@map("deal")
}

model Note {
  id        String   @id @default(cuid())
  tenantId  String
  content   String
  contactId String?
  dealId    String?
  authorId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  tenant  Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  contact Contact? @relation(fields: [contactId], references: [id])
  deal    Deal?    @relation(fields: [dealId], references: [id])
  author  User     @relation(fields: [authorId], references: [id])

  @@map("note")
}

model Project {
  id          String   @id @default(cuid())
  tenantId    String
  name        String
  description String?
  status      String   @default("active") // active, completed, paused
  startDate   DateTime?
  endDate     DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@map("project")
}

// NextAuth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("account")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_token")
}
